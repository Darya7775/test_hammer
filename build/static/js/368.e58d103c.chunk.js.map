{"version":3,"file":"static/js/368.e58d103c.chunk.js","mappings":"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","sources":["mock/data/scheduler-data.js","views/app-views/main/scheduler/styled.js","views/app-views/main/scheduler/index.js"],"sourcesContent":["import computerDesk from \"assets/furniture/computer_desk.png\";\r\nimport bed from \"assets/furniture/bed.png\";\r\nimport desk from \"assets/furniture/desk.png\";\r\nimport chair from \"assets/furniture/chair.png\";\r\nimport sofa from \"assets/furniture/sofa.png\";\r\nimport bedAndNightstand from \"assets/furniture/bed_and_nightstand.png\";\r\n\r\nexport const schedulerData = [\r\n    {\r\n        alt: \"computer desk\",\r\n        src: computerDesk,\r\n    },\r\n    {\r\n        alt: \"bed\",\r\n        src: bed,\r\n    },\r\n    {\r\n        alt: \"desk\",\r\n        src: desk,\r\n    },\r\n    {\r\n        alt: \"chair\",\r\n        src: chair,\r\n    },\r\n    {\r\n        alt: \"sofa\",\r\n        src: sofa,\r\n    },\r\n    {\r\n        alt: \"bed and nightstand\",\r\n        src: bedAndNightstand,\r\n    },\r\n];","import styled, { css } from \"styled-components\";\n\nconst list = css`\n  margin: 0;\n  padding: 0;\n  list-style: none;\n`;\n\nexport const SchedulerStyle = styled.section`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\n\nexport const ListItem = styled.ul`\n  ${list};\n\n  display: flex;\n  overflow-x: scroll;\n`;\n\nexport const ItemImage = styled.li`\n  &:hover {\n    box-shadow: 0px 0px 15px #000000;\n    cursor: pointer;\n  }\n`;\n\nexport const InputWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n\n  input {\n    padding: 10px;\n  }\n`;\n\nexport const WrapButton = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n\nexport const ListSavedSpreads = styled.ul`\n  ${list};\n\n  height: 100px;\n  overflow-y: scroll;\n\n  display: grid;\n  gap: 5px;\n`;\n","import React, { useRef, useState, useCallback } from \"react\";\nimport { Stage, Layer, Image } from 'react-konva';\nimport { Form, Button } from 'antd';\nimport useImage from 'use-image';\nimport { schedulerData } from \"mock/data/scheduler-data\";\nimport { jsPDF } from \"jspdf\";\nimport { useEffect } from \"react\";\nimport * as S from \"./styled.js\";\n\nlet saveLayer = {};\n\nconst URLImage = ({ image, index }) => {\n    const [img] = useImage(image.src);\n    let historyStep = 0;\n\n    function handleDragEnd (e) {\n        saveLayer[index].x = e.target.x();\n        saveLayer[index].y = e.target.y();\n\n        historyStep += 1;\n    };\n\n    return (\n      <Image\n        image={img}\n        x={image.x}\n        y={image.y}\n        draggable\n        onDragEnd={handleDragEnd}\n      />\n    );\n  };\n\nfunction Scheduler() {\n\n    const dragUrl = useRef();\n    const stageRef = useRef();\n    const [images, setImages] = useState([]);\n    const [name, setName] = useState('');\n    const [listArrangements, setListArrangements] = useState([]);\n    const [count, setCount] = useState(listArrangements.length);\n\n    useEffect(() => {\n      if(localStorage.getItem('image')) {\n        const obImage = JSON.parse(localStorage.getItem('image'));\n        setListArrangements(Object.keys(obImage));\n      }\n    }, [count]);\n\n    const callbacks = {\n      onNameChange: useCallback(e => setName(e.target.value), []),\n      // сохранение расстановки в localStorage\n      onSave: useCallback((name) => {\n            if(!localStorage.getItem('image')) {\n                const obImage = {};\n                obImage[name] = saveLayer;\n                localStorage.setItem('image', JSON.stringify(obImage));\n            } else {\n                const obImage = JSON.parse(localStorage.getItem('image'));\n                obImage[name] = saveLayer;\n                localStorage.setItem('image', JSON.stringify(obImage));\n            }\n            saveLayer = {};\n            setImages([]);\n            setName('');\n            setCount(count + 1);\n      }, []),\n      // сохранение в файл PDF\n      onSaveToPDF: useCallback(() => {\n            const pdf = new jsPDF('l', 'px', [stageRef.current.width(), stageRef.current.height()]);\n\n            pdf.addImage(\n              stageRef.current.toDataURL({ pixelRatio: 2 }),\n              0,\n              0,\n              stageRef.current.width(),\n              stageRef.current.height()\n            );\n\n            pdf.save('canvas.pdf');\n      }, []),\n      // открытие расстановки из сохраненного списка\n      onOpenSave: useCallback((arrangement) => {\n            const image = JSON.parse(localStorage.getItem('image'));\n            const ert = image[arrangement];\n            setImages(Object.values(ert));\n            saveLayer = ert;\n      }, []),\n        // удаление расстановки из списка\n      onDelete: useCallback((nameDelete) => {\n            const obImage = JSON.parse(localStorage.getItem('image'));\n            delete obImage[nameDelete];\n            localStorage.setItem('image', JSON.stringify(obImage));\n            setCount(count - 1);\n      }, [])\n    };\n\n  return(\n    <S.SchedulerStyle>\n      <S.Wrapper>\n\n        <S.InputWrapper>\n          <label htmlFor=\"name\">Сonstellation name</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            value={name}\n            onChange={callbacks.onNameChange}\n          />\n        </S.InputWrapper>\n        <S.Wrapper>\n          <S.WrapButton>\n            <Button type=\"primary\" htmlType=\"button\" onClick={() => callbacks.onSave(name)}>Save</Button>\n            <Button type=\"primary\" htmlType=\"button\" onClick={callbacks.onSaveToPDF}>Save as PDF</Button>\n          </S.WrapButton>\n            <S.ListSavedSpreads>saved spreads\n              {listArrangements.length ? // список сохраненных расстановок\n                listArrangements.map((item, index) => (\n                  <S.Wrapper key={index}>\n                    <Button type=\"link\" htmlType=\"button\" onClick={() => callbacks.onOpenSave(item)}>{item}</Button>\n                    <Button danger type=\"primary\" htmlType=\"button\" onClick={() => callbacks.onDelete(item)}>Delete</Button>\n                  </S.Wrapper>\n                ))\n                : \"no saved layoutl\"\n              }\n          </S.ListSavedSpreads>\n        </S.Wrapper>\n        <S.ListItem>\n          {schedulerData.map((item, index) => (\n            <S.ItemImage key={index}>\n              <img\n                alt={item.alt}\n                src={item.src}\n                width={\"100px\"}\n                height={\"100px\"}\n                draggable=\"true\"\n                onDragStart={(e) => {\n                  dragUrl.current = e.target.src;\n                  dragUrl.id = index;\n                }}\n              />\n            </S.ItemImage>\n          ))}\n        </S.ListItem>\n      </S.Wrapper>\n      <div\n        onDrop={(e) => {\n          e.preventDefault();\n          stageRef.current.setPointersPositions(e);\n\n          setImages(\n            images.concat([\n              {\n                ...stageRef.current.getPointerPosition(),\n                src: dragUrl.current,\n              },\n            ])\n          );\n          // сохранение выбранного элемента и его координат\n          saveLayer[images.length] = {};\n          saveLayer[images.length].x = stageRef.current.getPointerPosition().x;\n          saveLayer[images.length].y = stageRef.current.getPointerPosition().y;\n          saveLayer[images.length].src = dragUrl.current;\n        }}\n        onDragOver={(e) => e.preventDefault()}\n      >\n        <Stage\n          width={window.innerWidth}\n          height={window.innerHeight}\n          style={{ border: '1px solid grey', overflowX: 'hidden' }}\n          ref={stageRef}\n        >\n          <Layer>\n            {images.map((image, index) => { // отрисовка элементов на холсте\n              return <URLImage key={index} image={image} index={index}/>;\n            })}\n          </Layer>\n        </Stage>\n      </div>\n    </S.SchedulerStyle>\n  );\n}\n\nexport default Scheduler;\n"],"names":["schedulerData","alt","src","list","css","SchedulerStyle","styled","Wrapper","ListItem","ItemImage","InputWrapper","WrapButton","ListSavedSpreads","saveLayer","URLImage","image","index","useImage","img","x","y","draggable","onDragEnd","e","target","dragUrl","useRef","stageRef","useState","images","setImages","name","setName","listArrangements","setListArrangements","length","count","setCount","useEffect","localStorage","getItem","obImage","JSON","parse","Object","keys","callbacks","onNameChange","useCallback","value","onSave","setItem","stringify","onSaveToPDF","pdf","jsPDF","current","width","height","addImage","toDataURL","pixelRatio","save","onOpenSave","arrangement","ert","values","onDelete","nameDelete","htmlFor","type","id","onChange","htmlType","onClick","map","item","danger","onDragStart","onDrop","preventDefault","setPointersPositions","concat","getPointerPosition","onDragOver","window","innerWidth","innerHeight","style","border","overflowX","ref"],"sourceRoot":""}